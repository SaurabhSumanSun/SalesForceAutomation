package com.nttdata.testframework.salesforce.cucumber.glue.stepdefinitions;import com.nttdata.testframework.drivers.CustomWebDriver;import com.nttdata.testframework.pagefactory.salesforce.*;import com.nttdata.testframework.utils.Configuration;//import cucumber.api.DataTable;import io.cucumber.datatable.DataTable;import cucumber.api.java.en.Given;import cucumber.api.java.en.Then;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.openqa.selenium.WebDriver;import org.springframework.beans.factory.annotation.Autowired;import java.io.IOException;import java.math.BigDecimal;import java.util.List;import java.util.Map;public class enterpriseIndustrialisationUnifiedCommunication2Steps {    static Logger logger = LogManager.getLogger(enterpriseIndustrialisationUnifiedCommunication2Steps.class);    public static int TCV2;    public String TCV1;    public WebDriver driver;    public static String supportType;    public static String DealType;    String oppLink;    String basketLink;    @Autowired    CustomWebDriver customWebDriver;    @Autowired    Configuration configuration;    @Autowired    LoginPage loginPage;    @Autowired    opportunityPage opportunityPage;    @Autowired    o2ProductDetails O2productdetail;    @Autowired    newProductBasket newProductBasket;    @Autowired    configurePBX configurePBX;    @Autowired    configureSIP configureSIP;    @Autowired    configureGammaIboundNumber configureGammaIboundNumber;    @Autowired    configureFixedLines configureFixedLines;    @Autowired    profitAndLossReport profitAndLossReport;    @Autowired    discount discount;    @Autowired    clauses clauses;    @Autowired    callmixHostedMI callmixHostedMI;    @Autowired    connectivityDrop1ApprovalsAndBasketSync connectivityDrop1ApprovalsAndBasketSync;    @Autowired    salesGovernance SalesGovernance;    @Autowired    output output;    @Autowired    salesGovernanceDeliveryAndService SalesGovernanceDeliveryAndService;    @Autowired    SalesGovernanceSupportAndSolution salesGovernanceSupportAndSolution;    public enterpriseIndustrialisationUnifiedCommunication2Steps(CustomWebDriver customWebDriver) {        this.driver = customWebDriver.getWebDriver();    }    @Given("^user login to salesforce application")    public void user_login_to_salesforce_application() throws Throwable{        try {            loginPage.login();            loginPage.profileLogin(supportType);        }catch(Exception e){            logger.error(e.toString());        }    }    @Then("^Sales rep creates an opportunity with the \"([^\"]*)\" as Account \"([^\"]*)\" as Deal Type and \"([^\"]*)\" as Type of support$")    public void sales_rep_creates_an_opportunity_with_the_as_Deal_Type_and_as_Type_of_support(String Account_Name, String dealType, String typeOfSupport) throws Throwable {        String[] arr=opportunityPage.opportunityCreation (Account_Name, dealType, typeOfSupport);        DealType=arr[0];        supportType=arr[1];        oppLink= driver.getCurrentUrl();    }    @Then("^Sales rep adds a product detail with required details$")    public void sales_rep_adds_a_product_detail_with_required_details(DataTable table) throws Throwable {        List<Map<String, String>> list = table.asMaps(String.class, String.class);        for(int i=0; i< list.size(); i++) {            TCV1 = O2productdetail.productdetails(list.get(i).get("Product_Category"), list.get(i).get("Product"), list.get(i).get("Product_Detail"), list.get(i).get("Quans"), list.get(i).get("LOC"), list.get(i).get("Billed_Upfront"), list.get(i).get("Revenue_per_month"), list.get(i).get("Business_Type"));            driver.get(oppLink);            System.out.println("O2");        }        TCV1=TCV1.replaceAll(",", "");        TCV2=new BigDecimal(TCV1).intValue();    }    @Then("^Sales rep creates a product basket$")    public void then_Sales_rep_creates_a_product_basket() throws InterruptedException {        newProductBasket.productBasket(oppLink);        newProductBasket.addproduct();        System.out.println("oppLink=" +oppLink);        this.basketLink= driver.getCurrentUrl();        System.out.println("basketLink=" +basketLink);    }    @Then("^SalesRep adds PBX, SIP, Fixed Lines, Inbound number in the same basket$")    public void salesrep_adds_PBX_SIP_Fixed_Lines_Inbound_number_in_the_same_basket() throws InterruptedException, IOException {        configurePBX.PBXConfiguation();        Thread.sleep(15000);        System.out.println("basketLink=" +basketLink);        driver.get(basketLink);        driver.navigate().refresh();        Thread.sleep(5000);        newProductBasket.addanotherproduct();        configureSIP.SIPConfiguation();        Thread.sleep(15000);        driver.get(basketLink);        driver.navigate().refresh();        newProductBasket.addanotherproduct();        configureGammaIboundNumber.GammaInboundNumberConfiguation();        Thread.sleep(15000);        driver.get(basketLink);        driver.navigate().refresh();        newProductBasket.addanotherproduct();        configureFixedLines.fixedLineConfiguation();        Thread.sleep(15000);    }    @Then("^Sales representative configures Call mix$")    public void Sales_representative_configures_Call_mix() throws Throwable {        callmixHostedMI.Fixedlinescallmix();    }    @Then("^SalesRep views the Profit and Loss report$")    public void SalesRep_views_the_Profit_and_Loss_report() throws Throwable {        profitAndLossReport.profitLoss();    }    @Then("^SalesRep provides the required discount$")    public void SalesRep_provides_the_required_discount() throws Throwable {        discount.discounts();    }    @Then("^SalesRep visits the Clauses section$")    public void SalesRep_visits_the_Clauses_section() throws Throwable {        clauses.clauses();    }    @Then("^Finance Manager approves the basket$")    public void Finance_Manager_approves_the_basket() throws Throwable {        connectivityDrop1ApprovalsAndBasketSync.approvalHostedMI(basketLink);        //connectivityDrop1ApprovalsAndBasketSync.approval(basketLink);        connectivityDrop1ApprovalsAndBasketSync.UCApprovalOne(basketLink);    }    @Then("^Sales representative changes the opportunity stage as Awareness of needs inorder to kick off the Sales governance process$")    public void sales_representative_changes_the_opportunity_stage_as_Awareness_of_needs_inorder_to_kick_off_the_Sales_governance_process() throws InterruptedException, IOException {        SalesGovernance.kickoff(oppLink,supportType);    }    @Then("^SalesRepresentative feeds in the details in Agreement to support stage$")    public void salesrepresentative_feeds_in_the_details_in_Agreement_to_support_stage() throws InterruptedException, IOException {        salesGovernanceSupportAndSolution.agreementToSupportAction(oppLink,supportType);    }    @Then("^User logins as QgateAdministrator to approve Agreement to support stage$")    public void user_logins_as_QgateAdministrator_to_approve_Agreement_to_support_stage() throws InterruptedException, IOException {        salesGovernanceSupportAndSolution.approvalAgreementToSupportAction(oppLink,supportType);    }    @Then("^User logins as SalesRepresentative to feed in the details in Solution and Delivery QA Stage$")    public void user_logins_as_SalesRepresentative_to_feed_in_the_details_in_Solution_and_Delivery_QA_Stage() throws InterruptedException, IOException {        salesGovernanceSupportAndSolution.solutionAndDeliveryQA(oppLink,supportType);    }    @Then("^User logins as QgateAdministrator to approve Solution and Delivery QA Stage$")    public void user_logins_as_QgateAdministrator_to_approve_Solution_and_Delivery_QA_Stage() throws InterruptedException, IOException {        salesGovernanceSupportAndSolution.approvalSolutionAndDeliveryQA(oppLink,supportType);    }    @Then("^Sales representative feeds the data in Agreement to Propose stage with the following details\"([^\"]*)\"  \"([^\"]*)\"  \"([^\"]*)\"$")    public void sales_representative_feeds_the_data_in_Agreement_to_Propose_stage_with_the_following_details(String Submission_type, String Contract_terms, String Service_levels) throws InterruptedException, IOException {        SalesGovernance.agreementToPropose(oppLink,Submission_type, Contract_terms, Service_levels,TCV2, supportType);    }    @Then("^Qgate Administrator approves Agreement to propose stage$")    public void qgate_Administrator_approves_Agreement_to_propose_stage() throws InterruptedException, IOException {        SalesGovernance.financeApprovalAgreementToPropose(oppLink,TCV2,supportType);        SalesGovernance.approvalAgreementToPropose(oppLink,TCV2);    }    @Then("^Sales representative changes the Opportunity stage as decision$")    public void sales_representative_changes_the_Opportunity_stage_as_decision() throws InterruptedException, IOException {        SalesGovernance.Opp_stage_Decision_action(oppLink,TCV2,supportType);    }    @Then("^Sales representative feeds details in Agreement to sign stage$")    public void sales_representative_feeds_details_in_Agreement_to_sign_stage() throws InterruptedException, IOException {        SalesGovernance.Agreement_to_Sign_action(oppLink,TCV2);    }    @Then("^Qgate Administrator to approve Agreement to sign stage$")    public void qgate_Administrator_to_approve_Agreement_to_sign_stage() throws InterruptedException, IOException {        SalesGovernance.Approval_Agreement_to_Sign_action(oppLink,TCV2);        output.OutPut(DealType,supportType,basketLink);    }    @Then("^User logins as SalesRepresentative to feed in the details in Acceptance into delivery stage$")    public void user_logins_as_SalesRepresentative_to_feed_in_the_details_in_Acceptance_into_delivery_stage() throws InterruptedException, IOException {        SalesGovernanceDeliveryAndService.acceptanceToDelivery(oppLink,supportType,TCV2);    }    @Then("^User logins as QgateAdministrator to approve Acceptance into delivery stage$")    public void user_logins_as_QgateAdministrator_to_approve_Acceptance_into_delivery_stage() throws InterruptedException, IOException {        SalesGovernanceDeliveryAndService.approvalAcceptanceToDelivery(oppLink,TCV2,supportType);    }    @Then("^User logins as SalesRepresentative to feed in the details in Acceptance into service stage$")    public void user_logins_as_SalesRepresentative_to_feed_in_the_details_in_Acceptance_into_service_stage() throws InterruptedException, IOException {        SalesGovernanceDeliveryAndService.acceptanceToService(oppLink,supportType,TCV2);    }    @Then("^User logins as QgateAdministrator to approve Acceptance into service stage$")    public void user_logins_as_QgateAdministrator_to_approve_Acceptance_into_service_stage() throws InterruptedException, IOException {        SalesGovernanceDeliveryAndService.approvalAcceptanceToService(oppLink,TCV2,supportType);        output.OutPut(DealType, supportType, basketLink);    }}